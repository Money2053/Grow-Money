app_js = """import React, { useState, useEffect } from "react";

const initialInvestments = JSON.parse(localStorage.getItem("investments") || "[]");

const App = () => {
  const [investments, setInvestments] = useState(initialInvestments);
  const [symbol, setSymbol] = useState("");
  const [quantity, setQuantity] = useState(0);
  const [price, setPrice] = useState(0);
  const [date, setDate] = useState("");
  const [currency, setCurrency] = useState("USD");
  const [livePrices, setLivePrices] = useState({});

  useEffect(() => {
    localStorage.setItem("investments", JSON.stringify(investments));
  }, [investments]);

  useEffect(() => {
    const fetchPrices = async () => {
      const symbols = investments.map(inv => inv.symbol).filter(Boolean);
      const uniqueSymbols = [...new Set(symbols)];

      const prices = {};
      for (const sym of uniqueSymbols) {
        try {
          const res = await fetch(`https://api.twelvedata.com/price?symbol=${sym}&apikey=demo`);
          const data = await res.json();
          prices[sym] = parseFloat(data.price);
        } catch (err) {
          prices[sym] = null;
        }
      }
      setLivePrices(prices);
    };

    fetchPrices();
  }, [investments]);

  const addInvestment = () => {
    if (!quantity || !price || !date || !symbol) return;
    setInvestments([...investments, {
      symbol: symbol.toUpperCase(),
      quantity: parseFloat(quantity),
      price: parseFloat(price),
      date,
      currency
    }]);
    setSymbol("");
    setQuantity(0);
    setPrice(0);
    setDate("");
    setCurrency("USD");
  };

  const totalInvested = investments.reduce((sum, inv) => sum + inv.quantity * inv.price, 0);
  const lastFiveYears = new Date().getFullYear() - 5;
  const filteredInvestments = investments.filter((inv) => new Date(inv.date).getFullYear() >= lastFiveYears);

  return (
    <div className="min-h-screen bg-gray-100 p-6 text-gray-800">
      <div className="max-w-4xl mx-auto bg-white rounded-2xl shadow p-6">
        <h1 className="text-3xl font-bold mb-4 text-center">Grow Money</h1>

        <div className="grid grid-cols-1 md:grid-cols-5 gap-4 mb-4">
          <input type="text" placeholder="Symbol (e.g. AAPL)" className="p-2 border rounded" value={symbol} onChange={(e) => setSymbol(e.target.value)} />
          <input type="number" placeholder="Quantity" className="p-2 border rounded" value={quantity} onChange={(e) => setQuantity(e.target.value)} />
          <input type="number" placeholder="Price per Share" className="p-2 border rounded" value={price} onChange={(e) => setPrice(e.target.value)} />
          <input type="date" className="p-2 border rounded" value={date} onChange={(e) => setDate(e.target.value)} />
          <select className="p-2 border rounded" value={currency} onChange={(e) => setCurrency(e.target.value)}>
            <option value="USD">USD</option>
            <option value="INR">INR</option>
            <option value="EUR">EUR</option>
          </select>
        </div>

        <button onClick={addInvestment} className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600">Add Investment</button>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-6 mb-6">
          <div className="bg-green-100 p-4 rounded-xl">
            <p className="text-sm">Total Invested</p>
            <p className="text-xl font-bold">${totalInvested.toFixed(2)}</p>
          </div>
          <div className="bg-yellow-100 p-4 rounded-xl">
            <p className="text-sm">Entries (last 5 yrs)</p>
            <p className="text-xl font-bold">{filteredInvestments.length}</p>
          </div>
        </div>

        <h2 className="text-xl font-bold mt-4 mb-2">Investment History</h2>
        <div className="overflow-auto">
          <table className="w-full table-auto text-left">
            <thead>
              <tr>
                <th className="px-2 py-1">Date</th>
                <th className="px-2 py-1">Symbol</th>
                <th className="px-2 py-1">Quantity</th>
                <th className="px-2 py-1">Price</th>
                <th className="px-2 py-1">Currency</th>
                <th className="px-2 py-1">Live Price</th>
              </tr>
            </thead>
            <tbody>
              {filteredInvestments.map((inv, idx) => (
                <tr key={idx} className="border-t">
                  <td className="px-2 py-1">{inv.date}</td>
                  <td className="px-2 py-1">{inv.symbol}</td>
                  <td className="px-2 py-1">{inv.quantity}</td>
                  <td className="px-2 py-1">{inv.price}</td>
                  <td className="px-2 py-1">{inv.currency}</td>
                  <td className="px-2 py-1">{livePrices[inv.symbol] ? `$${livePrices[inv.symbol].toFixed(2)}` : 'N/A'}</td>
                </tr>
              ))}
              {filteredInvestments.length === 0 && (
                <tr>
                  <td colSpan="6" className="text-center py-4">No data for the last 5 years.</td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default App;
"""

with open(os.path.join(src_dir, "App.js"), "w") as f:
    f.write(app_js)

# Write index.js
index_js = """import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
"""
with open(os.path.join(src_dir, "index.js"), "w") as f:
    f.write(index_js)

# Write basic index.html
index_html = """<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Grow Money</title>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>
"""
with open(os.path.join(public_dir, "index.html"), "w") as f:
    f.write(index_html)

# Create a simple package.json
package_json = """{
  "name": "grow-money",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build"
  }
}
"""
